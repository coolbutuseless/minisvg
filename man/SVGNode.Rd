% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SVGNode.R
\name{SVGNode}
\alias{SVGNode}
\title{A class representing a single SVG element.}
\description{
A class representing a single SVG element.

A class representing a single SVG element.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{css_decls}}{character vector of css declaration text for this node}

\item{\code{css_urls}}{character vector of css urls for this node}

\item{\code{js_code}}{character vector of javascript code for this node}

\item{\code{js_urls}}{character vector of javascript urls for this node}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SVGNode$new()}}
\item \href{#method-update}{\code{SVGNode$update()}}
\item \href{#method-add_css_url}{\code{SVGNode$add_css_url()}}
\item \href{#method-add_css}{\code{SVGNode$add_css()}}
\item \href{#method-add_js_code}{\code{SVGNode$add_js_code()}}
\item \href{#method-add_js_url}{\code{SVGNode$add_js_url()}}
\item \href{#method-get_css_decls}{\code{SVGNode$get_css_decls()}}
\item \href{#method-get_css_urls}{\code{SVGNode$get_css_urls()}}
\item \href{#method-get_js_code}{\code{SVGNode$get_js_code()}}
\item \href{#method-get_js_urls}{\code{SVGNode$get_js_urls()}}
\item \href{#method-get_css_style}{\code{SVGNode$get_css_style()}}
\item \href{#method-get_js_style}{\code{SVGNode$get_js_style()}}
\item \href{#method-as_character_inner}{\code{SVGNode$as_character_inner()}}
\item \href{#method-as_character}{\code{SVGNode$as_character()}}
\item \href{#method-print}{\code{SVGNode$print()}}
\item \href{#method-save}{\code{SVGNode$save()}}
\item \href{#method-copy}{\code{SVGNode$copy()}}
\item \href{#method-clone}{\code{SVGNode$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Initialize an SVGNode
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\subsection{Method \code{update()}}{
Update the SVG Element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$update(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{attributes and children to set on this node}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Named arguments are considered attributes and will overwrite
existing attributes with the same name. Set to NULL to delete the attribute

Unnamed arguments are appended to the list of child nodes.  These
should be text, other SVGElements or any ojbect that can be represented
as a single text string using "as.character()"

To print just the attribute name, but without a value, set to NA
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_css_url"></a>}}
\subsection{Method \code{add_css_url()}}{
Add a URL to a CSS style sheet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$add_css_url(css_url)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{css_url}}{URL to style sheet. e.g. \code{$add_css_url("css/local.css")}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_css"></a>}}
\subsection{Method \code{add_css()}}{
Add a CSS declaration for this element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$add_css(css_decl)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{css_decl}}{CSS string, or object which can be coerced to character.
e.g. \code{$add_dec("#thing {font-size: 27px}")}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_js_code"></a>}}
\subsection{Method \code{add_js_code()}}{
Add javascript code for this element
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$add_js_code(js_code)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{js_code}}{character string containing javascript code.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_js_url"></a>}}
\subsection{Method \code{add_js_url()}}{
Add a javaxcript URL to load within the SVG
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$add_js_url(js_url)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{js_url}}{URL to javascript code. e.g. \code{$add_js_url("example.org/eg.js")}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_css_decls"></a>}}
\subsection{Method \code{get_css_decls()}}{
Create a CSS declaration string for inclusion in the
             character output for this element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$get_css_decls()}\if{html}{\out{</div>}}
}

\subsection{Details}{
this includes all css for all child elements
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_css_urls"></a>}}
\subsection{Method \code{get_css_urls()}}{
Create a vector or urls for CSS inclustion
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$get_css_urls()}\if{html}{\out{</div>}}
}

\subsection{Details}{
this includes all CSS URLs for all child elements
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_js_code"></a>}}
\subsection{Method \code{get_js_code()}}{
Create a character vector of JS code for this node and
             all child nodes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$get_js_code()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_js_urls"></a>}}
\subsection{Method \code{get_js_urls()}}{
Create a vector of external JS urls
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$get_js_urls()}\if{html}{\out{</div>}}
}

\subsection{Details}{
this includes all CSS URLs for all child elements
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_css_style"></a>}}
\subsection{Method \code{get_css_style()}}{
Create a complete CSS <style> tag using the declarations
             and URLs of the current element, and all child elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$get_css_style()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
character string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_js_style"></a>}}
\subsection{Method \code{get_js_style()}}{
Create a complete CSS style tag using the declarations
             and URLs of the current element, and all child elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$get_js_style()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
character string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_character_inner"></a>}}
\subsection{Method \code{as_character_inner()}}{
Recursively convert this SVGElement and children to text
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$as_character_inner()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
single character string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_character"></a>}}
\subsection{Method \code{as_character()}}{
Recursively convert this SVGElement and children to text
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$as_character()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
single character string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
Print the SVG string to the terminal
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$print(include_declaration = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_declaration}}{Include the leading XML declaration? default: FALSE}

\item{\code{...}}{Extra arguments passed to \code{SVGElement$as_character()}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-save"></a>}}
\subsection{Method \code{save()}}{
Save the text representation of this node and its children
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$save(filename, include_declaration = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filename}}{filename}

\item{\code{include_declaration}}{Include the leading XML declaration? default: FALSE}

\item{\code{...}}{Extra arguments passed to \code{SVGElement$as_character()}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-copy"></a>}}
\subsection{Method \code{copy()}}{
Make a deep copy of this node and its children
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$copy()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGNode$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
