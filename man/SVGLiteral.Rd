% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SVGLiteral.R
\name{SVGLiteral}
\alias{SVGLiteral}
\alias{svg_literal}
\title{A class representing a literal SVG element.}
\description{
A class representing a literal SVG element.

A class representing a literal SVG element.
}
\section{Super class}{
\code{\link[minisvg:SVGNode]{minisvg::SVGNode}} -> \code{SVGLiteral}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{x}}{literal contents. Must be coercible to string via 'as.character(x)'}

\item{\code{name}}{kept only for compatibility with other SVGNode objects. This
should be set to 'literal'}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SVGLiteral$new()}}
\item \href{#method-update}{\code{SVGLiteral$update()}}
\item \href{#method-as_character_inner}{\code{SVGLiteral$as_character_inner()}}
\item \href{#method-as_character}{\code{SVGLiteral$as_character()}}
\item \href{#method-clone}{\code{SVGLiteral$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="add_css">}\href{../../minisvg/html/SVGNode.html#method-add_css}{\code{minisvg::SVGNode$add_css()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="add_css_url">}\href{../../minisvg/html/SVGNode.html#method-add_css_url}{\code{minisvg::SVGNode$add_css_url()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="add_js_code">}\href{../../minisvg/html/SVGNode.html#method-add_js_code}{\code{minisvg::SVGNode$add_js_code()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="add_js_url">}\href{../../minisvg/html/SVGNode.html#method-add_js_url}{\code{minisvg::SVGNode$add_js_url()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="copy">}\href{../../minisvg/html/SVGNode.html#method-copy}{\code{minisvg::SVGNode$copy()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="find">}\href{../../minisvg/html/SVGNode.html#method-find}{\code{minisvg::SVGNode$find()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="get_css_decls">}\href{../../minisvg/html/SVGNode.html#method-get_css_decls}{\code{minisvg::SVGNode$get_css_decls()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="get_css_style">}\href{../../minisvg/html/SVGNode.html#method-get_css_style}{\code{minisvg::SVGNode$get_css_style()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="get_css_urls">}\href{../../minisvg/html/SVGNode.html#method-get_css_urls}{\code{minisvg::SVGNode$get_css_urls()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="get_js_code">}\href{../../minisvg/html/SVGNode.html#method-get_js_code}{\code{minisvg::SVGNode$get_js_code()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="get_js_style">}\href{../../minisvg/html/SVGNode.html#method-get_js_style}{\code{minisvg::SVGNode$get_js_style()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="get_js_urls">}\href{../../minisvg/html/SVGNode.html#method-get_js_urls}{\code{minisvg::SVGNode$get_js_urls()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="print">}\href{../../minisvg/html/SVGNode.html#method-print}{\code{minisvg::SVGNode$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="minisvg" data-topic="SVGNode" data-id="save">}\href{../../minisvg/html/SVGNode.html#method-save}{\code{minisvg::SVGNode$save()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Initialize an SVGElement
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGLiteral$new(x, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{the literal text to include}

\item{\code{...}}{further arguments. Named arguments treated as attributes,
unnamed arguments treated as child nodes}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\subsection{Method \code{update()}}{
Update the SVG Element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGLiteral$update(x, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{the literal text to include}

\item{\code{...}}{attributes and children to set on this node}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Named arguments are considered attributes and will overwrite
existing attributes with the same name. Set to NULL to delete the attribute

Unnamed arguments are appended to the list of child nodes.  These
should be text, other SVGElements or any ojbect that can be represented
as a single text string using "as.character()"

To print just the attribute name, but without a value, set to NA
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_character_inner"></a>}}
\subsection{Method \code{as_character_inner()}}{
Convert this SVGLiteral
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGLiteral$as_character_inner(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
single character string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_character"></a>}}
\subsection{Method \code{as_character()}}{
Convert this SVGLiteral
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGLiteral$as_character(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
single character string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SVGLiteral$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
